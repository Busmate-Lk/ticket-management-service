name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Rename JAR
        run: mv target/*.jar target/app.jar

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/app.jar"
          target: "/home/ubuntu/${{ github.event.repository.name }}/"

      - name: Deploy Docker container
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            PROJECT_DIR="/home/ubuntu/${{ github.event.repository.name }}"
            APP_NAME="${{ github.event.repository.name }}"

            mkdir -p $PROJECT_DIR
            cd $PROJECT_DIR

            echo "Stopping old container on port 8083..."
            docker ps -q --filter "publish=8083" | xargs -r docker stop || true
            docker rm -f $APP_NAME || true

            cat <<'EOF' > Dockerfile
            FROM openjdk:17-jdk
            WORKDIR /app
            COPY app.jar app.jar
            EXPOSE 8083
            ENTRYPOINT ["java", "-jar", "app.jar"]
            EOF

            echo "Rebuilding Docker image..."
            docker build --no-cache -t $APP_NAME .

            echo "Running new container..."
            docker run -d --name $APP_NAME -p 8083:8083 $APP_NAME
