name: Deploy to EC2

on:
  push:
    branches:
      - main  # Change this if you deploy from another branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Build the JAR
      - name: Build JAR
        run: mvn clean package -DskipTests

      # 4. Rename JAR file to a consistent name
      - name: Rename JAR
        run: mv target/*.jar target/app.jar

      # 5. Copy JAR to EC2 instance
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/app.jar"
          target: "/home/ubuntu/${{ github.event.repository.name }}/"

      # 6. SSH into EC2 and deploy with Docker
      - name: Deploy Docker container
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # stop on error

            PROJECT_DIR="/home/ubuntu/${{ github.event.repository.name }}"
            APP_NAME="${{ github.event.repository.name }}"

            # Ensure project directory exists
            mkdir -p $PROJECT_DIR
            cd $PROJECT_DIR

            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update -y
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Create Dockerfile dynamically
            cat <<'EOF' > Dockerfile
            FROM openjdk:17-jdk
            WORKDIR /app
            COPY app.jar app.jar
            EXPOSE 8083
            ENTRYPOINT ["java", "-jar", "app.jar"]
            EOF

            # Build Docker image
            docker build -t $APP_NAME .

            # Remove existing container if running
            docker rm -f $APP_NAME || true

            # Run new container on port 8083
            docker run -d --name $APP_NAME -p 8083:8083 $APP_NAME
