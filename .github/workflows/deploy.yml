name: Deploy to EC2

on:
  push:
    branches:
      - main   # Change to 'dev' if you want to deploy on dev branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Build the JAR
      - name: Build JAR
        run: mvn clean package -DskipTests

      # 4. Copy JAR to EC2
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}   # usually 'ubuntu' for Ubuntu AMI
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar"
          target: "/home/${{ secrets.EC2_USER }}/${{ github.event.repository.name }}/"

      # 5. Deploy Docker container on EC2
      - name: Deploy Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Ensure project directory exists
            mkdir -p ${{ github.event.repository.name }}
            cd ${{ github.event.repository.name }}

            # Create Dockerfile
            cat <<EOF > Dockerfile
            FROM openjdk:17-jdk
            WORKDIR /app
            COPY *.jar app.jar
            ENTRYPOINT ["java", "-jar", "app.jar"]
            EXPOSE 8080
            EOF

            # Build and run container
            docker build -t ${{ github.event.repository.name }} .
            docker rm -f ${{ github.event.repository.name }} || true
            docker run -d --name ${{ github.event.repository.name }} -p 8080:8080 ${{ github.event.repository.name }}
